# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: osmosis/epochs/genesis.proto, osmosis/epochs/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import Dict, List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class EpochInfo(betterproto.Message):
    identifier: str = betterproto.string_field(1)
    start_time: datetime = betterproto.message_field(2)
    duration: timedelta = betterproto.message_field(3)
    current_epoch: int = betterproto.int64_field(4)
    current_epoch_start_time: datetime = betterproto.message_field(5)
    epoch_counting_started: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the epochs module's genesis state."""

    epochs: List["EpochInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryEpochsInfoRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryEpochsInfoResponse(betterproto.Message):
    epochs: List["EpochInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryCurrentEpochRequest(betterproto.Message):
    identifier: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryCurrentEpochResponse(betterproto.Message):
    current_epoch: int = betterproto.int64_field(1)


class QueryStub(betterproto.ServiceStub):
    async def epoch_infos(self) -> "QueryEpochsInfoResponse":

        request = QueryEpochsInfoRequest()

        return await self._unary_unary(
            "/osmosis.epochs.v1beta1.Query/EpochInfos", request, QueryEpochsInfoResponse
        )

    async def current_epoch(
        self, *, identifier: str = ""
    ) -> "QueryCurrentEpochResponse":

        request = QueryCurrentEpochRequest()
        request.identifier = identifier

        return await self._unary_unary(
            "/osmosis.epochs.v1beta1.Query/CurrentEpoch",
            request,
            QueryCurrentEpochResponse,
        )


class QueryBase(ServiceBase):
    async def epoch_infos(self) -> "QueryEpochsInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def current_epoch(self, identifier: str) -> "QueryCurrentEpochResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_epoch_infos(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.epoch_infos(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_current_epoch(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "identifier": request.identifier,
        }

        response = await self.current_epoch(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/osmosis.epochs.v1beta1.Query/EpochInfos": grpclib.const.Handler(
                self.__rpc_epoch_infos,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryEpochsInfoRequest,
                QueryEpochsInfoResponse,
            ),
            "/osmosis.epochs.v1beta1.Query/CurrentEpoch": grpclib.const.Handler(
                self.__rpc_current_epoch,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryCurrentEpochRequest,
                QueryCurrentEpochResponse,
            ),
        }
