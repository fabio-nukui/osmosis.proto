# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: osmosis/claim/v1beta1/claim.proto, osmosis/claim/v1beta1/genesis.proto, osmosis/claim/v1beta1/params.proto, osmosis/claim/v1beta1/query.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import Dict, List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


class Action(betterproto.Enum):
    ActionAddLiquidity = 0
    ActionSwap = 1
    ActionVote = 2
    ActionDelegateStake = 3


@dataclass(eq=False, repr=False)
class ClaimRecord(betterproto.Message):
    """A Claim Records is the metadata of claim data per address"""

    # address of claim user
    address: str = betterproto.string_field(1)
    # total initial claimable amount for the user
    initial_claimable_amount: List[
        "___cosmos_base_v1_beta1__.Coin"
    ] = betterproto.message_field(2)
    # true if action is completed index of bool in array refers to action enum #
    action_completed: List[bool] = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the claim module's parameters."""

    airdrop_start_time: datetime = betterproto.message_field(1)
    duration_until_decay: timedelta = betterproto.message_field(2)
    duration_of_decay: timedelta = betterproto.message_field(3)
    # denom of claimable asset
    claim_denom: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the claim module's genesis state."""

    # balance of the claim module's account
    module_account_balance: "___cosmos_base_v1_beta1__.Coin" = (
        betterproto.message_field(1)
    )
    # params defines all the parameters of the module.
    params: "Params" = betterproto.message_field(2)
    # list of claim records, one for every airdrop recipient
    claim_records: List["ClaimRecord"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class QueryModuleAccountBalanceRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryModuleAccountBalanceResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    # params defines the parameters of the module.
    module_account_balance: List[
        "___cosmos_base_v1_beta1__.Coin"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    # params defines the parameters of the module.
    params: "Params" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryClaimRecordRequest(betterproto.Message):
    address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryClaimRecordResponse(betterproto.Message):
    claim_record: "ClaimRecord" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryClaimableForActionRequest(betterproto.Message):
    address: str = betterproto.string_field(1)
    action: "Action" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class QueryClaimableForActionResponse(betterproto.Message):
    coins: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryTotalClaimableRequest(betterproto.Message):
    address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryTotalClaimableResponse(betterproto.Message):
    coins: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(1)


class QueryStub(betterproto.ServiceStub):
    async def module_account_balance(self) -> "QueryModuleAccountBalanceResponse":

        request = QueryModuleAccountBalanceRequest()

        return await self._unary_unary(
            "/osmosis.claim.v1beta1.Query/ModuleAccountBalance",
            request,
            QueryModuleAccountBalanceResponse,
        )

    async def params(self) -> "QueryParamsResponse":

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/osmosis.claim.v1beta1.Query/Params", request, QueryParamsResponse
        )

    async def claim_record(self, *, address: str = "") -> "QueryClaimRecordResponse":

        request = QueryClaimRecordRequest()
        request.address = address

        return await self._unary_unary(
            "/osmosis.claim.v1beta1.Query/ClaimRecord",
            request,
            QueryClaimRecordResponse,
        )

    async def claimable_for_action(
        self, *, address: str = "", action: "Action" = None
    ) -> "QueryClaimableForActionResponse":

        request = QueryClaimableForActionRequest()
        request.address = address
        request.action = action

        return await self._unary_unary(
            "/osmosis.claim.v1beta1.Query/ClaimableForAction",
            request,
            QueryClaimableForActionResponse,
        )

    async def total_claimable(
        self, *, address: str = ""
    ) -> "QueryTotalClaimableResponse":

        request = QueryTotalClaimableRequest()
        request.address = address

        return await self._unary_unary(
            "/osmosis.claim.v1beta1.Query/TotalClaimable",
            request,
            QueryTotalClaimableResponse,
        )


class QueryBase(ServiceBase):
    async def module_account_balance(self) -> "QueryModuleAccountBalanceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def params(self) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def claim_record(self, address: str) -> "QueryClaimRecordResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def claimable_for_action(
        self, address: str, action: "Action"
    ) -> "QueryClaimableForActionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def total_claimable(self, address: str) -> "QueryTotalClaimableResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_module_account_balance(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.module_account_balance(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_params(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.params(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_claim_record(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "address": request.address,
        }

        response = await self.claim_record(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_claimable_for_action(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "address": request.address,
            "action": request.action,
        }

        response = await self.claimable_for_action(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_total_claimable(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "address": request.address,
        }

        response = await self.total_claimable(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/osmosis.claim.v1beta1.Query/ModuleAccountBalance": grpclib.const.Handler(
                self.__rpc_module_account_balance,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryModuleAccountBalanceRequest,
                QueryModuleAccountBalanceResponse,
            ),
            "/osmosis.claim.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/osmosis.claim.v1beta1.Query/ClaimRecord": grpclib.const.Handler(
                self.__rpc_claim_record,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryClaimRecordRequest,
                QueryClaimRecordResponse,
            ),
            "/osmosis.claim.v1beta1.Query/ClaimableForAction": grpclib.const.Handler(
                self.__rpc_claimable_for_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryClaimableForActionRequest,
                QueryClaimableForActionResponse,
            ),
            "/osmosis.claim.v1beta1.Query/TotalClaimable": grpclib.const.Handler(
                self.__rpc_total_claimable,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTotalClaimableRequest,
                QueryTotalClaimableResponse,
            ),
        }


from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__
